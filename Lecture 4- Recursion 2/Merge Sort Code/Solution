public class solution {

	public static void mergeSort(int[] input){

      mergeSort(input, 0, input.length - 1 );
      
	}
  
  	public static void mergeSort(int[] input, int start, int end)	{
      
      if(start >= end)
        return;
      
      int mid = (start + end) / 2;
      
      mergeSort(input, start, mid);
      mergeSort(input, mid+1, end);
      merge(input, start, end, mid);
      
    }
  
  	public static void merge(int[] input, int start, int end, int mid){
      
      int output[] = new int[end-start+1]; 
      int x=0, i=start, j=mid+1;
      
      while(i<=mid && j<=end)
      {
     
        if(input[i] <= input[j])
        {
          output[x++] = input[i];
          output[x] = input[j];
          i++;
        }
        else
        { 
          output[x++] = input[j];
          output[x] = input[i];
          j++;
        }
        
      }
      
      if(j>end)
        for(;i<=mid;i++)
	        output[x++] = input[i];
      else
		    for(;j<=end;j++)
	        output[x++] = input[j];
      
      for(int z=0; start<=end; z++)
        input[start++] = output[z];
      
   }
  
}
