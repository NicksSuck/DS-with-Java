
/* Signature of four required functions is given in the code. You can create other functions as well if you need.
*  Also you should submit your code even if you are not done with all the functions. 
*/

// Main used internally is shown here just for your reference.
/*public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		int n = s.nextInt();
		int degree1[] = new int[n];
		for(int i = 0; i < n; i++){
			degree1[i] = s.nextInt();
		}
		int coeff1[] = new int[n];
		for(int i = 0; i < n; i++){
			coeff1[i] = s.nextInt();
		}
		Polynomial first = new Polynomial();
		for(int i = 0; i < n; i++){
			first.setCoefficient(degree1[i],coeff1[i]);
		}
		n = s.nextInt();
		int degree2[] = new int[n];
		for(int i = 0; i < n; i++){
			degree2[i] = s.nextInt();
		}
		 int coeff2[] = new int[n];
		for(int i = 0; i < n; i++){
			coeff2[i] = s.nextInt();
		}
		Polynomial second = new Polynomial();
		for(int i = 0; i < n; i++){
			second.setCoefficient(degree2[i],coeff2[i]);
		}
		int choice = s.nextInt();
		Polynomial result;
		switch(choice){
		// Add
		case 1: 
			 result = first.add(second);
			result.print();
			break;
		// Subtract	
		case 2 :
			 result = first.subtract(second);
			result.print();
			break;
		// Multiply
		case 3 :
			 result = first.multiply(second);
			result.print();
			break;
		}
        
	}
  */


import java.util.Arrays;

public class Polynomial {
	
  private int coff[] = new int[100];
	static Polynomial res = new Polynomial();
	
	public Polynomial() {
		Arrays.fill(coff, 0);
	}
	
	public void setCoefficient(int degree, int coeff){
	      this.coff[degree] = coeff;
	}
	
	public void print(){
      	for(int i=0; i<coff.length; i++)
          if(coff[i] != 0)
            System.out.print(coff[i] + "x" + i + " "); 
	}

// Adds two polynomials and returns a new polynomial which has result
	public Polynomial add(Polynomial p){
    for(int i=0; i<100; i++)
			  res.coff[i] = this.coff[i] + p.coff[i];
		
    return res;
	}
	
// Subtracts two polynomials and returns a new polynomial which has result
	public Polynomial subtract(Polynomial p){
		for(int i=0; i<100; i++)
			res.coff[i] = this.coff[i] - p.coff[i];
		
		return res;
	}
	
// Multiply two polynomials and returns a new polynomial which has result
	public Polynomial multiply(Polynomial p){
    for(int i=0; i<100; i++)
		  for(int j=0; j<100; j++)
				if((i+j) <100)
					res.coff[i+j]+= (this.coff[i] * p.coff[j]);
	
		return res;
	}
	
}
